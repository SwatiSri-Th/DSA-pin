#include <stdio.h>
#include <stdlib.h>

// Structure to represent a binary tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Structure to represent a stack node
struct StackNode {
    struct TreeNode* node;
    struct StackNode* next;
};

// Function to create a new tree node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to push a node onto the stack
void push(struct StackNode** top, struct TreeNode* node) {
    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    newNode->node = node;
    newNode->next = *top;
    *top = newNode;
}

// Function to pop a node from the stack
struct TreeNode* pop(struct StackNode** top) {
    if (*top == NULL) {
        return NULL;
    }

    struct StackNode* temp = *top;
    struct TreeNode* poppedNode = temp->node;
    *top = (*top)->next;
    free(temp);
    return poppedNode;
}

// Function to perform level order traversal using two stacks
void levelOrderTraversal(struct TreeNode* root) {
    if (root == NULL) {
        return;
    }

    struct StackNode* currentLevelStack = NULL;
    struct StackNode* nextLevelStack = NULL;

    push(&currentLevelStack, root);

    while (currentLevelStack != NULL) {
        struct TreeNode* current = pop(&currentLevelStack);

        if (current != NULL) {
            printf("%d ", current->data);

            if (current->left != NULL) {
                push(&nextLevelStack, current->left);
            }
            if (current->right != NULL) {
                push(&nextLevelStack, current->right);
            }
        }

        if (currentLevelStack == NULL) {
            // Swap stacks for the next level
            struct StackNode* temp = currentLevelStack;
            currentLevelStack = nextLevelStack;
            nextLevelStack = temp;
            printf("\n");
        }
    }
}

int main() {
    struct TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    printf("Level Order Traversal:\n");
    levelOrderTraversal(root);

    return 0;
}
