#include<stdio.h>
#include<stdlib.h>

struct TreeNode
{
    int key;
    struct TreeNode * left;
    struct TreeNode * right;
};

struct TreeNode * createNode (int key)
{
    struct TreeNode * newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->key = key;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct TreeNode * insert(struct TreeNode * root, int key)
{
    if (root == NULL)
    {
        return createNode(key);
    }
    if(key<root->key)
    {
        root->left = insert(root->left,key);
    }
    else if(key>root->key)
    {
        root->right = insert(root->right, key);
    }
    return root;
}
struct TreeNode * search(struct TreeNode * root, int key)
{
    if (root == NULL || root->key == key)
    {
        return root;
    }
    if (key<root->key)
    {
        return search (root->left, key);
    }
    return search (root->right, key);
}

int main()
{
    struct TreeNode * root = NULL;
    int keys[] = {5, 3, 7, 2, 4, 6, 8};
    int numKeys = sizeof(keys)/sizeof(keys[0]);

    for (int i=0; i<numKeys; ++i)
    {
        root = insert(root, keys[i]);
    }
    int searchKey = 4;
    struct TreeNode * result = search(root, searchKey);
    if(result)
    {
        printf("Key %d found in the BST.\n", searchKey);
    }
    else
    {
        printf("Key %d not found in the BST.\n", searchKey);
    }
    return 0;
}