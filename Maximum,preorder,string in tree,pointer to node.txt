#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to represent a binary tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new tree node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a new node into the BST
struct TreeNode* insertNode(struct TreeNode* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    
    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    }
    
    return root;
}

// Function to search for the maximum value in the BST
int findMaxValue(struct TreeNode* root) {
    while (root->right != NULL) {
        root = root->right;
    }
    return root->data;
}

// Function for preorder traversal without recursion
void preorderTraversal(struct TreeNode* root) {
    struct TreeNode* stack[1000];
    int top = -1;

    if (root == NULL) {
        return;
    }

    stack[++top] = root;
    while (top >= 0) {
        struct TreeNode* node = stack[top--];
        printf("%d ", node->data);

        if (node->right != NULL) {
            stack[++top] = node->right;
        }
        if (node->left != NULL) {
            stack[++top] = node->left;
        }
    }
}

// Function to search for a string in the BST and return a pointer to the node
struct TreeNode* search(struct TreeNode* root, int data) {
    if (root == NULL || root->data == data) {
        return root;
    }

    if (data < root->data) {
        return search(root->left, data);
    }

    return search(root->right, data);
}

// Function to print the binary tree as a tree-like structure
void printTree(struct TreeNode* root, int level) {
    if (root == NULL) {
        return;
    }

    printTree(root->right, level + 1);

    for (int i = 0; i < level; i++) {
        printf("    ");
    }
    printf("%d\n", root->data);

    printTree(root->left, level + 1);
}

int main() {
    struct TreeNode* root = NULL;
    root = insertNode(root, 50);
    root = insertNode(root, 30);
    root = insertNode(root, 70);
    root = insertNode(root, 20);
    root = insertNode(root, 40);
    root = insertNode(root, 60);
    root = insertNode(root, 80);

    printf("Maximum Value in the Tree: %d\n", findMaxValue(root));

    printf("Preorder Traversal without Recursion: ");
    preorderTraversal(root);
    printf("\n");

    int searchData = 40;
    struct TreeNode* searchResult = search(root, searchData);
    if (searchResult != NULL) {
        printf("Found %d in the Tree\n", searchData);
    } else {
        printf("%d not found in the Tree\n", searchData);
    }

    printf("Binary Tree Structure:\n");
    printTree(root, 0);

    return 0;
}
