#include <stdio.h>
#include <stdlib.h>

// Structure to represent a binary tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new tree node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform inorder traversal and list leaf nodes, non-leaf nodes, and levels
void listNodes(struct TreeNode* root, int level) {
    if (root == NULL) {
        return;
    }

    // Leaf node
    if (root->left == NULL && root->right == NULL) {
        printf("Leaf Node: %d (Level: %d)\n", root->data, level);
    }
    // Non-leaf node
    else {
        printf("Non-Leaf Node: %d (Level: %d)\n", root->data, level);
    }

    // Recursively traverse left and right subtrees
    listNodes(root->left, level + 1);
    listNodes(root->right, level + 1);
}

int main() {
    struct TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    printf("List of Nodes:\n");
    listNodes(root, 0);

    return 0;
}
